name: Backport merged pull requests to selected branches
description: >
  Fast and flexible action to cherry-pick commits from labeled pull requests
author: korthout
inputs:
  add_author_as_assignee:
    description: >
      Controls whether to set the author of the original pull request as an assignee on the backport pull request.
      By default, the original author is not made an assignee.
  add_labels:
    description: >
      The action will add these labels (comma-delimited) to the backport pull request.
      By default, no labels are added.
  auto_merge_enabled:
    description: >
      Controls whether to auto-merge the created backport pull request.
      When enabled, the pull request will automatically merge when all required checks pass and approvals are received.
      Can be set to a simple boolean (true/false) or controlled dynamically via workflow expressions. Examples:
      Simple boolean: auto_merge_enabled: true
      Opt-in with label: auto_merge_enabled: ${{ contains(github.event.pull_request.labels.*.name, 'backport-auto-merge') }}
      Opt-out with label: auto_merge_enabled: ${{ !contains(github.event.pull_request.labels.*.name, 'backport-no-auto-merge') }}
      By default, auto-merge is not enabled.
    default: false
  auto_merge_method:
    description: >
      The merge method to use when auto-merge is enabled on backport PRs.
      Valid options are 'merge' (create a merge commit), 'squash' (squash and merge), or 'rebase' (rebase and merge).
      The specified method must be enabled in your repository's merge settings, otherwise auto-merge will fail.
      By default, the backport PR is merged using a merge commit if auto-merge is enabled.
    default: merge
  branch_name:
    description: >
      Template used as the name for branches created by this action.
      Placeholders can be used to define variable values.
      These are indicated by a dollar sign and curly braces (`${placeholder}`).
      Please refer to this action's README for all available placeholders.
    default: backport-${pull_number}-to-${target_branch}
  cherry_picking:
    description:
      Determines which commits are cherry-picked.

      When set to `auto`, the action cherry-picks the commits based on the method used to merge the pull request.
      - For "Squash and merge", the action cherry-picks the squashed commit.
      - For "Rebase and merge", the action cherry-picks the rebased commits.
      - For "Merged as a merge commit", the action cherry-picks the commits from the pull request.

      When set to `pull_request_head`, the action cherry-picks the commits from the pull request.
      Specifically, those reachable from the pull request's head and not reachable from the pull request's base.

      By default, the action cherry-picks the commits based on the method used to merge the pull request.
    default: auto
  copy_assignees:
    description: >
      Controls whether to copy the assignees from the original pull request to the backport pull request.
      By default, the assignees are not copied.
    default: false
  copy_labels_pattern:
    description: >
      Regex pattern to match github labels which will be copied from the original pull request to the backport pull request.
      Note that labels matching `label_pattern` are excluded.
      By default, no labels are copied.
  copy_milestone:
    description: >
      Controls whether to copy the milestone from the original pull request to the backport pull request.
      By default, the milestone is not copied.
    default: false
  copy_requested_reviewers:
    description: >
      Controls whether to copy the requested reviewers from the original pull request to the backport pull request.
      Note that this does not request reviews from those users who already reviewed the original pull request.
      By default, the requested reviewers are not copied.
    default: false
  experimental:
    description: >
      Configure experimental features by passing a JSON object.
      The following properties can be specified:

      #### `conflict_resolution`

      Specifies how the action will handle a conflict occuring during the cherry-pick.
      In all cases, the action will stop the cherry-pick at the first conflict encountered.

      Behavior is defined by the option selected.
      - When set to `fail` the backport fails when the cherry-pick encounters a conflict.
      - When set to `draft_commit_conflicts` the backport will always create a draft pull request with the first conflict encountered committed.

      Instructions are provided on the original pull request on how to resolve the conflict and continue the cherry-pick.

      #### `downstream_repo`

      Define if you want to backport to a repository other than where the workflow runs.

      By default, the action always backports to the repository in which the workflow runs.

      #### `downstream_owner`

      Define if you want to backport to another owner than the owner of the repository the workflow runs on.
      Only takes effect if the `downstream_repo` property is also defined.

      By default, uses the owner of the repository in which the workflow runs.
    default: >
      {
        "conflict_resolution": "fail"
      }
  github_token:
    description: >
      Token to authenticate requests to GitHub.
      Used to create and label pull requests and to comment.
      Either GITHUB_TOKEN or a repo-scoped Personal Access Token (PAT).
    default: ${{ github.token }}
  github_workspace:
    description: Working directory for the backport action.
    default: ${{ github.workspace }}
  git_committer_name:
    description: Name of the committer for the cherry-picked commit.
    default: 'github-actions[bot]'
  git_committer_email:
    description: Email of the committer for the cherry-picked commit.
    default: 'github-actions[bot]@users.noreply.github.com'
  label_pattern:
    description: >
      Regex pattern to match the backport labels on the merged pull request.
      Must contain a capture group for the target branch.
      The action will backport the pull request to each matched target branch.
      Note that the pull request's headref is excluded automatically.
    default: ^backport ([^ ]+)$
  merge_commits:
    description: >
      Specifies how the action should deal with merge commits on the merged pull request.
      When set to `fail` the backport fails when the action detects one or more merge commits.
      When set to `skip` the action only cherry-picks non-merge commits, i.e. it ignores merge commits.
    default: fail
  pull_description:
    description: >
      Template used as description (i.e. body) in the pull requests created by this action.
      Placeholders can be used to define variable values.
      These are indicated by a dollar sign and curly braces (`${placeholder}`).
      Please refer to this action's README for all available placeholders.
    default: |-
      # Description
      Backport of #${pull_number} to `${target_branch}`.
  pull_title:
    description: >
      Template used as the title in the pull requests created by this action.
      Placeholders can be used to define variable values.
      These are indicated by a dollar sign and curly braces (`${placeholder}`).
      Please refer to this action's README for all available placeholders.
    default: >-
      [Backport ${target_branch}] ${pull_title}
  source_pr_number:
    description: >
      Specifies the pull request (by its number) to backport, i.e. the source pull request.
      When set, the action will backport the specified pull request to each target branch.
      When not set, the action determines the source pull request from the event payload.
  target_branches:
    description: >
      The action will backport the pull request to each specified target branch (space-delimited).
      Note that the pull request's headref is excluded automatically.
      Can be used in addition to backport labels.
      By default, only backport labels are used to specify the target branches.

outputs:
  created_pull_numbers:
    description: >
      Space-separated list containing the identifying number of each created pull request.
      Or empty when the action created no pull requests.
      For example, '123' or '123 124 125'.
  was_successful:
    description: >
      Whether or not the changes could be backported successfully to all targets.
      Either 'true' or 'false'.
  was_successful_by_target:
    description: >
      Whether or not the changes could be backported successfully to all targets - broken down by target.
      Follows the pattern '{{label}}=true|false'.
runs:
  using: "node20"
  main: "dist/index.js"
branding:
  icon: "copy"
  color: "yellow"
